// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace JustinaSystem.Entities;

internal partial class Customer
{
    [Key]
    public int customer_id { get; set; }

    [Required (ErrorMessage ="Firts name is required")]
    [StringLength(50)]
    [Unicode(false)]
    public string first_name { get; set; }

    [Required(ErrorMessage = "Last name is required")]
    [StringLength(50)]
    [Unicode(false)]
    public string last_name { get; set; }

    [Required(ErrorMessage = "Phone number is required")]
    [StringLength(20)]
    [Unicode(false)]
    public string phone_number1 { get; set; }

    [StringLength(20)]
    [Unicode(false)]
    public string phone_number2 { get; set; }

    [StringLength(20)]
    [Unicode(false)]
    public string phone_number3 { get; set; }

    [StringLength(50)]
    [Unicode(false)]
    [Required(ErrorMessage = "Email address is required")]
    [DataType(DataType.EmailAddress)]
    [EmailAddress(ErrorMessage = "Invalid email format.")]
    public string email_address { get; set; }

    [Required(ErrorMessage = "Enrollment date is required")]
    [Column(TypeName = "date")]
    public DateTime? enrollment_date { get; set; }

    [Required(ErrorMessage = "Address is required")]
    [StringLength(100)]
    [Unicode(false)]
    public string address { get; set; }

    [Required(ErrorMessage = "City is required")]
    [StringLength(50)]
    [Unicode(false)]
    public string city { get; set; }

    [StringLength(2)]
    [Unicode(false)]
    public string state { get; set; }

    [StringLength(10)]
    [Unicode(false)]
    public string zip_code { get; set; }

    [Required(ErrorMessage = "Referral is required")]
    [StringLength(20)]
    [Unicode(false)]
    public string referral { get; set; }

    [StringLength(255)]
    [Unicode(false)]
    public string notes { get; set; }

    [InverseProperty("customer")]
    public virtual ICollection<Appointment> Appointments { get; set; } = new List<Appointment>();

    [InverseProperty("customer")]
    public virtual ICollection<Dog> Dogs { get; set; } = new List<Dog>();
}